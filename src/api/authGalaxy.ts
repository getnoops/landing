/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * auth-galaxy
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "./custom-instance";
import type { ErrorType } from "./custom-instance";
export type GetLoginParams = {
	auth_request: string;
};

export type VerifyAuthParams = {
	token: string;
};

export interface ControllersCreateServiceOutputType2 {
	id: string;
}

export interface ControllersCreateServiceOutput {
	id: string;
}

export interface ControllersCreatePlaygroundInput {
	company: string;
	company_size: string;
	email: string;
	name: string;
}

export interface ControllersCreateLoginInput {
	email: string;
	id: string;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
	config: any,
	args: infer P,
) => any
	? P
	: never;

/**
 * @summary Verify Auth
 */
export const verifyAuth = (
	params: VerifyAuthParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<unknown>(
		{ url: `/api/auth`, method: "get", params, signal },
		options,
	);
};

export const getVerifyAuthQueryKey = (params: VerifyAuthParams) => {
	return [`/api/auth`, ...(params ? [params] : [])] as const;
};

export const getVerifyAuthQueryOptions = <
	TData = Awaited<ReturnType<typeof verifyAuth>>,
	TError = ErrorType<void>,
>(
	params: VerifyAuthParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof verifyAuth>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getVerifyAuthQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof verifyAuth>>> = ({
		signal,
	}) => verifyAuth(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof verifyAuth>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type VerifyAuthQueryResult = NonNullable<
	Awaited<ReturnType<typeof verifyAuth>>
>;
export type VerifyAuthQueryError = ErrorType<void>;

/**
 * @summary Verify Auth
 */
export const useVerifyAuth = <
	TData = Awaited<ReturnType<typeof verifyAuth>>,
	TError = ErrorType<void>,
>(
	params: VerifyAuthParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof verifyAuth>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getVerifyAuthQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

/**
 * @summary Get Login
 */
export const getLogin = (
	params: GetLoginParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<unknown>(
		{ url: `/api/login`, method: "get", params, signal },
		options,
	);
};

export const getGetLoginQueryKey = (params: GetLoginParams) => {
	return [`/api/login`, ...(params ? [params] : [])] as const;
};

export const getGetLoginQueryOptions = <
	TData = Awaited<ReturnType<typeof getLogin>>,
	TError = ErrorType<void>,
>(
	params: GetLoginParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof getLogin>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetLoginQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogin>>> = ({
		signal,
	}) => getLogin(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getLogin>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetLoginQueryResult = NonNullable<
	Awaited<ReturnType<typeof getLogin>>
>;
export type GetLoginQueryError = ErrorType<void>;

/**
 * @summary Get Login
 */
export const useGetLogin = <
	TData = Awaited<ReturnType<typeof getLogin>>,
	TError = ErrorType<void>,
>(
	params: GetLoginParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof getLogin>>,
			TError,
			TData
		>;
		request?: SecondParameter<typeof customInstance>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetLoginQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

/**
 * @summary Create Login
 */
export const createLogin = (
	controllersCreateLoginInput: ControllersCreateLoginInput,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<ControllersCreateServiceOutput>(
		{
			url: `/api/login`,
			method: "post",
			headers: { "Content-Type": "application/json" },
			data: controllersCreateLoginInput,
		},
		options,
	);
};

export const getCreateLoginMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createLogin>>,
		TError,
		{ data: ControllersCreateLoginInput },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createLogin>>,
	TError,
	{ data: ControllersCreateLoginInput },
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createLogin>>,
		{ data: ControllersCreateLoginInput }
	> = (props) => {
		const { data } = props ?? {};

		return createLogin(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateLoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof createLogin>>
>;
export type CreateLoginMutationBody = ControllersCreateLoginInput;
export type CreateLoginMutationError = ErrorType<unknown>;

/**
 * @summary Create Login
 */
export const useCreateLogin = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createLogin>>,
		TError,
		{ data: ControllersCreateLoginInput },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const mutationOptions = getCreateLoginMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * @summary Get Logout
 */
export const getLogout = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<unknown>(
		{ url: `/api/logout`, method: "get", signal },
		options,
	);
};

export const getGetLogoutQueryKey = () => {
	return [`/api/logout`] as const;
};

export const getGetLogoutQueryOptions = <
	TData = Awaited<ReturnType<typeof getLogout>>,
	TError = ErrorType<void>,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetLogoutQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogout>>> = ({
		signal,
	}) => getLogout(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getLogout>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetLogoutQueryResult = NonNullable<
	Awaited<ReturnType<typeof getLogout>>
>;
export type GetLogoutQueryError = ErrorType<void>;

/**
 * @summary Get Logout
 */
export const useGetLogout = <
	TData = Awaited<ReturnType<typeof getLogout>>,
	TError = ErrorType<void>,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>;
	request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetLogoutQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
};

/**
 * @summary Create Playground User
 */
export const createPlaygroundUser = (
	controllersCreatePlaygroundInput: ControllersCreatePlaygroundInput,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<ControllersCreateServiceOutputType2>(
		{
			url: `/api/playground`,
			method: "post",
			headers: { "Content-Type": "application/json" },
			data: controllersCreatePlaygroundInput,
		},
		options,
	);
};

export const getCreatePlaygroundUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createPlaygroundUser>>,
		TError,
		{ data: ControllersCreatePlaygroundInput },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createPlaygroundUser>>,
	TError,
	{ data: ControllersCreatePlaygroundInput },
	TContext
> => {
	const { mutation: mutationOptions, request: requestOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createPlaygroundUser>>,
		{ data: ControllersCreatePlaygroundInput }
	> = (props) => {
		const { data } = props ?? {};

		return createPlaygroundUser(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreatePlaygroundUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof createPlaygroundUser>>
>;
export type CreatePlaygroundUserMutationBody = ControllersCreatePlaygroundInput;
export type CreatePlaygroundUserMutationError = ErrorType<unknown>;

/**
 * @summary Create Playground User
 */
export const useCreatePlaygroundUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createPlaygroundUser>>,
		TError,
		{ data: ControllersCreatePlaygroundInput },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const mutationOptions = getCreatePlaygroundUserMutationOptions(options);

	return useMutation(mutationOptions);
};
